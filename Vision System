Step 1
  mission statement: help the driver to quickly and accurately place a hatch cover or cargo for cargoship. As well as a hatch cover and cargo in rocketship on level 1 and level 2. 
  On the joystick  there will be a button the driver will press to activate the autoassist for the cargoship or rocketship. 
  Auto-assists is programed to align with the white line of the cargoship and rocket for assistantance to achieve attachement of hatch cover or the placement of cargo on level 1. 
  How autoassits  will work  on the field: 
  1. The robot has to be in proximity of // TODO: figure out distance and the placement of the camera  on the robot 
    A. The reflecting tape and the alignment tape will be used to guide the robot  for assistance to driver 
    B. Some of the constraints is the driver may NOT be parallel to the target. It MUST be perpendicular to the target. This target is the reflecting tape and alignment tape 
    on the cargoship and rocketship. However, the rocketship on has reflecting tape on level one, for levels 2 and 3 it is the same basic vision for the first level, yet is  
    determined by distance ( of the arm, the driver  arrivng in placemet of level one will  be the same placement of the robot for levels 1 and 2)  
  2. If the robot is close to the alignment tape ( when parallel) please press the autoassist button to allow the system to detect the reflecting tape and alignment tape.
    A. The adjustment of the robot will allow the driver to be centered for placement of cargo and hatch cover.
  
Step 2
Input:  usb camera, joystick, gyroscope 
Output: reflecting tape, action of auto-assist, screen ( locks on the target, modify the camera feed with graphics), sensor light, 
Step 3 --  completed review 

Step 4
Vision camera USB port 
joystick button 
//to be determined other constants 

Step 5
command -> autoassistAlignment
subsystem -> Vision

Step 6 Write Pseudocode
Initialize USB Camera
If autoassistButton is pressed
then read matrix from the camera
get contours
Sort contours based on area
Sort top 4 target contours based on angle
find centroids
let deltax = x1-x0
if deltax <0 then
let deltax = x0-x1
let deltay = y1-y0
if deltay <0 then
let deltay = y0-y1
let targetx = deltax + x1
let targety = deltay + y1
let errorangle = (camera FOV / horizontal resolution) * (targetx - center of screen)
read joystick for speed
let errorangle_radians = 2pi / 360 * errorangle
call driveCommandSimple turning = errorangle_radians 
turning with the PID, changes the radians 
PID is a plug in system that we plug in to direct the robot so theta is zero
PID input is set point and gyro. The output is driveCommandSimple. Consists of Kp(proportional) Ki(constantly multiples a number by the current error) Kd(change in error, remembers what the last error was) ( constants ). Turning speed comes out of PID 
 


 
